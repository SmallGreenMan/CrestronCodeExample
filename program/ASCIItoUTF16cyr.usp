/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:Converter UTF8 to ASCII
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
 #SYMBOL_NAME "ASCII to UTF16"
 #HINT "Converter ASCII to UTF16 Cyrillic for Crestron Mobile"
 #DEFINE_CONSTANT MAXSTRING 256
 #DEFINE_CONSTANT MAXLENGTH 255
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
 #ANALOG_SERIAL_EXPAND InputsWithOutputs
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PROGRAM
#HELP_BEGIN

This module is used to convert serial signal to strings suitable for Crestron mobile.

Input:      
Str_ASCII  - Input string ASCII

Output:
Str_UTF16  - Output string with encoding for Crestron Mobile - Cyrillic characters are replaced with special sequence
			 String is limited to 255 characters - this is maximum length Crestron mobile can accept.
                        
Parameter:
Substitute - 0d (do not substitute Cyrillic characters)
             1d (substitute Cyrillic characters which are look similar to Latin with Latin characters - allows to fit some more characters)

---------------
(C)2011 Crestron Russia
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT max
// ANALOG_INPUT 
// STRING_INPUT Str_UTF[MAXSTRING][MAXLENGTH]; 
BUFFER_INPUT Str_ASCII[MAXSTRING][MAXLENGTH];

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT Str_UTF16[MAXSTRING];

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER substitute;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES substitute
	propValidUnits = unitDecimal;
	propDefaultUnit = unitDecimal;
   	//propBounds = 0d, 1d;
	propDefaultValue = 0d;  // or, propDefaultValue = "";
	propList = { 0d , "RUS_only" } , { 1d , "RUS_LAT" };
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER Busy[MAXSTRING];
INTEGER ConvArray[255];    
INTEGER Last;

// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function InitilazeArray()
{
	/// Only special letters are changed!!!

	ConvArray[0xA8]=0x0401; // ¨
	ConvArray[0xB8]=0x0451; // ¸

	ConvArray[0xC0]=0x0410; // A
	ConvArray[0xC1]=0x0411; // Á
	ConvArray[0xC2]=0x0412; // Â
	ConvArray[0xC3]=0x0413; // Ã
 	ConvArray[0xC4]=0x0414; // Ä
 	ConvArray[0xC5]=0x0415; // Å
	ConvArray[0xC6]=0x0416; // Æ
	ConvArray[0xC7]=0x0417; // Ç
 	ConvArray[0xC8]=0x0418; // È
 	ConvArray[0xC9]=0x0419; // É
 	ConvArray[0xCA]=0x041A; // Ê
    ConvArray[0xCB]=0x041B; // Ë
	ConvArray[0xCC]=0x041C; // Ì
 	ConvArray[0xCD]=0x041D; // Í
  	ConvArray[0xCE]=0x041E; // Î
  	ConvArray[0xCF]=0x041F; // Ï

	ConvArray[0xD0]=0x0420; // Ð
	ConvArray[0xD1]=0x0421; // Ñ
	ConvArray[0xD2]=0x0422; // Ò
	ConvArray[0xD3]=0x0423; // Ó
 	ConvArray[0xD4]=0x0424; // Ô
 	ConvArray[0xD5]=0x0425; // Õ
	ConvArray[0xD6]=0x0426; // Ö
	ConvArray[0xD7]=0x0427; // ×
 	ConvArray[0xD8]=0x0428; // Ø
 	ConvArray[0xD9]=0x0429; // Ù
 	ConvArray[0xDA]=0x042A; // Ú
    ConvArray[0xDB]=0x042B; // Û
	ConvArray[0xDC]=0x042C; // Ü
 	ConvArray[0xDD]=0x042D; // Ý
  	ConvArray[0xDE]=0x042E; // Þ
  	ConvArray[0xDF]=0x042F; // ß

	ConvArray[0xE0]=0x0430; // à
	ConvArray[0xE1]=0x0431; // á
	ConvArray[0xE2]=0x0432; // â
	ConvArray[0xE3]=0x0433; // ã
 	ConvArray[0xE4]=0x0434; // ä
 	ConvArray[0xE5]=0x0435; // å
	ConvArray[0xE6]=0x0436; // æ
	ConvArray[0xE7]=0x0437; // ç
 	ConvArray[0xE8]=0x0438; // è
 	ConvArray[0xE9]=0x0439; // é
 	ConvArray[0xEA]=0x043A; // ê
    ConvArray[0xEB]=0x043B; // ë
	ConvArray[0xEC]=0x043C; // ì
 	ConvArray[0xED]=0x043D; // í
  	ConvArray[0xEE]=0x043E; // î
  	ConvArray[0xEF]=0x043F; // ï

	ConvArray[0xF0]=0x0440; // ð
	ConvArray[0xF1]=0x0441; // ñ
	ConvArray[0xF2]=0x0442; // ò
	ConvArray[0xF3]=0x0443; // ó
 	ConvArray[0xF4]=0x0444; // ô
 	ConvArray[0xF5]=0x0445; // õ
	ConvArray[0xF6]=0x0446; // ö
	ConvArray[0xF7]=0x0447; // ÷
 	ConvArray[0xF8]=0x0448; // ø
 	ConvArray[0xF9]=0x0449; // ù
 	ConvArray[0xFA]=0x044A; // ú
    ConvArray[0xFB]=0x044B; // û
	ConvArray[0xFC]=0x044C; // ü
 	ConvArray[0xFD]=0x044D; // ý
  	ConvArray[0xFE]=0x044E; // þ
  	ConvArray[0xFF]=0x044F; // ÿ

	if (substitute) // Replace Cyrillic characters with Latin characters which looks similar
	{
		ConvArray[0xC0]='A'; // A
		ConvArray[0xC2]='B'; // Â
	 	ConvArray[0xC5]='E'; // Å
		ConvArray[0xCC]='M'; // Ì
 		ConvArray[0xCD]='H'; // Í
	  	ConvArray[0xCE]='O'; // Î
  		ConvArray[0xD0]='P'; // Ð
		ConvArray[0xD1]='C'; // Ñ
		ConvArray[0xD2]='T'; // Ò
	 	ConvArray[0xD5]='X'; // Õ

		ConvArray[0xE0]='a'; // à
	 	ConvArray[0xE5]='e'; // å
	  	ConvArray[0xEE]='o'; // î
		ConvArray[0xF0]='p'; // ð
		ConvArray[0xF1]='c'; // ñ
		ConvArray[0xF3]='y'; // ó
 		ConvArray[0xF5]='x'; // õ
	}
          
}  


/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function UTF8toASCII()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/

/*
RELEASE input
{
    // TODO:  Add code here
}
*/
    

CHANGE Str_ASCII
{               
	Integer B1;  
	Integer Current;
	String new_char[8]; 
	String TmpStr[MAXLENGTH];  

	Current=GetLastModifiedArrayIndex();

	if (Busy[Current] = 0) // Check if buffer processing is already started
	{ 
		Busy[Current] = 1; // Set flag that buffer is being processed
		TmpStr=""; // Initilize processing string
				
		B1=GetC(Str_ASCII[Current]); // Read first byte
		
		While (B1 <> 65535) // Read buffer until it empty
		{            
      		if (convArray[B1]<0x400) /// Unicode UCS sybmbol was read
			{
				if (len(TmpStr)<255) TmpStr=TmpStr+chr(convArray[b1]); /// If Latin or "look like" letters just add same symbol
			}
			else
			{
				if (len(TmpStr)<248) makestring(TmpStr, "%s&#x%X;", TmpStr, convArray[b1]); // If Cyrillic letters add ""&#x...;" sequence
			}
	
			B1=GetC(Str_ASCII[Current]); // Read next byte
			
		} // end while       

		Busy[Current] = 0; // Clear processing flag
		Str_UTF16[Current]=TmpStr;  // Send output string
	} //end if busy
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	integer i;

    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.
 	
	WaitForInitializationComplete();

	for (Last=MAXSTRING to 1 Step -1)
	{
		if (IsSignalDefined(Str_ASCII[Last])) Break; // Check for the last position of input array
	}

	for (i=1 to Last)
	{
		Busy[i]=0;
	}
	
	for (i=0 to 255)
    {
		convArray[i]=i;
	}

	InitilazeArray();

    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}

